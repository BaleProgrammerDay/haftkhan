.NPC {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;

  position: absolute;

  row-gap: 10px;

  top: 20px;
  right: -180px;
  z-index: 1;
  font-weight: 500;
  img {
    width: 200px;
    height: 200px;
  }
  rotate: -5deg;

  background-color: var(--color-neutrals-n-00);
  color: var(--color-fixed-neutrals-n-10);

  transition: transform 1s ease-in-out;

  padding: 10px;
}

.ScratchMe {
  display: flex;
  justify-content: center;
}

.ScratchLine {
  display: flex;
  width: 2px;
  height: 20px;
  background-color: var(--color-fixed-neutrals-n-100);

  &.Odd {
    background-color: var(--color-fixed-neutrals-n-200);
  }
}

.Pin {
  width: 100px;
  height: 10px;
  background-color: var(--color-fixed-neutrals-n-100);
  border-radius: 8px;
  position: relative;
  transition: opacity 0.3s ease-out;

  &.PinExploded {
    opacity: 0;
    pointer-events: none;
  }
}

// Explosion effect
.ExplosionEffect {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  pointer-events: none;
}

.ExplosionFlash {
  position: absolute;
  top: -50px;
  left: -50px;
  width: 100px;
  height: 100px;
  background: radial-gradient(circle, rgba(255, 255, 255, 0.8), rgba(255, 200, 200, 0.4), transparent);
  border-radius: 50%;
  animation: flash 0.3s ease-out forwards;
}

@keyframes flash {
  0% {
    transform: scale(0);
    opacity: 1;
  }
  50% {
    transform: scale(1.5);
    opacity: 0.8;
  }
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

// Pin fragments - pieces of the broken pin
.PinFragment {
  position: absolute;
  width: 20px;
  height: 4px;
  background: linear-gradient(90deg, #444, #888, #444);
  border-radius: 2px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  border: 1px solid #333;
  animation: pinFragmentFall 2.5s ease-out forwards;
  animation-delay: calc(var(--fragment-index) * 0.05s);
  z-index: 10;
}

@keyframes pinFragmentFall {
  0% {
    transform: translate(-50%, -50%) rotate(0deg) scale(1);
    opacity: 1;
  }
  10% {
    transform: translate(
      calc(-50% + cos(var(--fragment-index) * 60deg) * 10px),
      calc(-50% + sin(var(--fragment-index) * 60deg) * 10px)
    ) rotate(calc(var(--fragment-index) * 15deg)) scale(1.1);
    opacity: 1;
  }
  25% {
    transform: translate(
      calc(-50% + cos(var(--fragment-index) * 60deg) * 30px),
      calc(-50% + sin(var(--fragment-index) * 60deg) * 30px + 20px)
    ) rotate(calc(var(--fragment-index) * 45deg + 90deg)) scale(1);
    opacity: 1;
  }
  50% {
    transform: translate(
      calc(-50% + cos(var(--fragment-index) * 60deg) * 50px),
      calc(-50% + sin(var(--fragment-index) * 60deg) * 50px + 80px)
    ) rotate(calc(var(--fragment-index) * 90deg + 180deg)) scale(0.9);
    opacity: 0.9;
  }
  75% {
    transform: translate(
      calc(-50% + cos(var(--fragment-index) * 60deg) * 70px),
      calc(-50% + sin(var(--fragment-index) * 60deg) * 70px + 150px)
    ) rotate(calc(var(--fragment-index) * 135deg + 270deg)) scale(0.7);
    opacity: 0.6;
  }
  100% {
    transform: translate(
      calc(-50% + cos(var(--fragment-index) * 60deg) * 90px),
      calc(-50% + sin(var(--fragment-index) * 60deg) * 90px + 250px)
    ) rotate(calc(var(--fragment-index) * 180deg + 360deg)) scale(0.3);
    opacity: 0;
  }
}

// Debris particles - small pieces that scatter
.DebrisParticle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: #888;
  border-radius: 50%;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  animation: debrisScatter 2s ease-out forwards;
  animation-delay: calc(var(--particle-index) * 0.05s);
}

@keyframes debrisScatter {
  0% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
  }
  30% {
    transform: translate(
      calc(-50% + cos(var(--particle-index) * 45deg) * 30px),
      calc(-50% + sin(var(--particle-index) * 45deg) * 30px + 50px)
    ) scale(0.8);
    opacity: 0.8;
  }
  70% {
    transform: translate(
      calc(-50% + cos(var(--particle-index) * 45deg) * 50px),
      calc(-50% + sin(var(--particle-index) * 45deg) * 50px + 150px)
    ) scale(0.5);
    opacity: 0.4;
  }
  100% {
    transform: translate(
      calc(-50% + cos(var(--particle-index) * 45deg) * 70px),
      calc(-50% + sin(var(--particle-index) * 45deg) * 70px + 250px)
    ) scale(0.2);
    opacity: 0;
  }
}

// Progress bar styles
.ProgressContainer {
  position: absolute;
  top: -30px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 5px;
  z-index: 10;
}

.ProgressBar {
  width: 120px;
  height: 8px;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 4px;
  overflow: hidden;
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: background 0.1s ease-out;
}

.ProgressFill {
  height: 100%;
  width: 100%;
  background-color: var(--color-alternative-a-07);
  border-radius: 4px;
  transform-origin: left;
}

.ProgressText {
  font-size: 12px;
  font-weight: bold;
  color: #fff;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
}

// Scratch effects
.ScratchEffects {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  z-index: 5;
}

.ScratchMark {
  position: absolute;
  width: 3px;
  height: 20px;
  background: var(--color-fixed-neutrals-n-100);
  border-radius: 2px;
  animation: scratchAppear 0.5s ease-out forwards;
  transform: rotate(45deg);
}

@keyframes scratchAppear {
  0% {
    opacity: 0;
    transform: rotate(45deg) scale(0);
  }
  50% {
    opacity: 0.8;
    transform: rotate(45deg) scale(1.2);
  }
  100% {
    opacity: 1;
    transform: rotate(45deg) scale(1);
  }
}
